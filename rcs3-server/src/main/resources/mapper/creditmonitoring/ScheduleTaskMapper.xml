<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.geo.rcs.modules.monitor.dao.ScheduleTaskMapper">

    <select id="queryByJobId" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
		select * from ${tableName} where job_id = #{jobId} and user_id = #{userId}
	</select>

    <select id="queryObject" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
        select * from ${tableName} where id = #{id}
    </select>
    <select id="getAbTaskDetail" resultType="com.geo.rcs.modules.abtest.entity.AbScheduleTask">
        select * from ${tableName} where id = #{id}
    </select>
    <insert id="saveTaskBatch" useGeneratedKeys="true" keyProperty="id">
        insert into ${tableName}
        (name,id_number,cid,start_time,job_id,user_id,execute_status,create_time,parms_json)
        values
        <foreach collection="list" item="item" index="index"
                 separator=",">
            (#{item.name},#{item.idNumber},#{item.cid},#{item.startTime},#{item.jobId},#{item.userId},#{item.executeStatus},#{item.createTime},#{item.parmsJson})
        </foreach>
    </insert>
    <insert id="saveAbTaskBatch" useGeneratedKeys="true" keyProperty="id">
        insert into ${tableName}
        (name,id_number,cid,role,job_id,user_id,execute_status,remark,create_time,goal_id,parms_json)
        values
        <foreach collection="list" item="item" index="index"
                 separator=",">
            (#{item.name},#{item.idNumber},#{item.cid},#{item.role},#{item.jobId},#{item.userId},#{item.executeStatus},#{item.remark},#{item.createTime},#{item.goalId},#{item.parmsJson})
        </foreach>
    </insert>

    <select id="getDimension" resultType="com.geo.rcs.modules.monitor.entity.Dimension">
		select * from  monitor_dimension where unicode = #{unicode}
	</select>

    <select id="findByPage" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
		select * from ${tableName} where 1=1
        <if test="taskStatus != null and taskStatus!='' ">
            and task_status = #{taskStatus}
        </if>
        <if test="executeStatus != null and executeStatus!='' ">
            and execute_status = #{executeStatus}
        </if>
        <if test="startTime != null and startTime != ''">
            and start_time >= #{startTime}
        </if>
        <if test=" endTime != null and endTime != ''">
            and start_time &lt;= #{endTime}
        </if>
        <if test="name != null and name !=''">
            and (name =#{name} or id_number =#{name} or cid =#{name})
        </if>
		AND user_id = #{userId} AND job_id = #{jobId}
        order by id desc
	</select>
    <select id="findAbTaskByPage" resultType="com.geo.rcs.modules.abtest.entity.AbScheduleTask">
        select name ,id_number,cid,job_id,create_time,task_status,parms_json,
        max(CASE role WHEN 'A' THEN  id END)  idA,
        max(CASE role WHEN 'A' THEN  goal_id END)  goalA,
        max(CASE role WHEN 'A' THEN  execute_status  END)  executeStatusA,
        max(CASE role WHEN 'A' THEN  result_map END)  resultMapA,
        max(CASE role WHEN 'B' THEN  id END)  idB,
        max(CASE role WHEN 'B' THEN  goal_id END)  goalB,
        max(CASE role WHEN 'B' THEN execute_status  END ) executeStatusB,
        max(CASE role WHEN 'B' THEN  result_map END)  resultMapB
        FROM ${tableName} where user_id = #{userId} AND job_id = #{jobId}
        <if test="taskStatus != null and taskStatus!='' ">
            and task_status = #{taskStatus}
        </if>
        <if test="name != null and name !=''">
            and (name =#{name} or id_number =#{name} or cid =#{name})
        </if>
        group by remark
    </select>
    <select id="findAbTaskByPageAll" resultType="com.geo.rcs.modules.abtest.entity.AbScheduleTask">
        select name ,create_time,task_status,execute_status,result_map,role
        FROM ${tableName} where user_id = #{userId} AND job_id = #{jobId}
        <if test="taskStatus != null and taskStatus!='' ">
            and task_status = #{taskStatus}
        </if>
        <if test="stopStatus != null and stopStatus!='' ">
            and (execute_status =2 or execute_status=3)
        </if>
        <if test="name != null and name !=''">
            and (name =#{name} or id_number =#{name} or cid =#{name})
        </if>
--         group by name
    </select>
    <select id="queryByFilter" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask" parameterType="map">
		select * from ${tableName}
		where #{nowTime} >=start_time
		and #{reserveTime} > update_time
		and job_id = #{jobId}
		and user_id = #{userId}
		and distribute_status = 0
		and task_status != 2
		and task_status != 3
		and execute_status != 0
		limit #{limit}
	</select>

    <select id="getAlarmData" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
        select *
        from ${taskTableName}
        where user_id = #{userId}
        and execute_status = 3
        and job_id = #{jobId}
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            AND create_time BETWEEN #{startTime} AND #{endTime}
        </if>
    </select>

    <select id="queryTableIFExists" resultType="java.lang.String" parameterType="java.lang.String">
		select t.table_name from information_schema.TABLES t where t.TABLE_SCHEMA ="rcs2" and t.TABLE_NAME ="${tableName}";
	</select>

    <update id="createTaskTable" parameterType="java.lang.String">
        CREATE TABLE IF NOT EXISTS `${tableName}` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `name` varchar(255) DEFAULT NULL COMMENT '姓名',
      `id_number` varchar(20) DEFAULT NULL COMMENT '身份证',
      `cid` bigint(11) DEFAULT NULL COMMENT '手机号',
      `job_id` int(11) DEFAULT NULL COMMENT '任务编号',
      `create_time` datetime DEFAULT NULL COMMENT '创建时间',
      `task_status` tinyint(1) DEFAULT '0' COMMENT '执行状态（0:未执行;1:监控中;2完成;）',
      `distribute_status` tinyint(1) DEFAULT '0' COMMENT '分发状态(0:未分发，1：已分发)',
      `distribute_time` datetime DEFAULT NULL COMMENT '分发时间',
      `distribute_num` int(11) DEFAULT '0' COMMENT '分发次数',
      `update_time` datetime DEFAULT '2018-01-01 00:00:00' COMMENT '更新时间',
      `result_map` text  COMMENT '查询结果',
      `remark` varchar(255) DEFAULT NULL COMMENT '备注',
      `cron_expression` varchar(255) DEFAULT NULL COMMENT '周期',
      `user_id` bigint(11) DEFAULT NULL COMMENT '客户标识',
      `start_time` timestamp NULL DEFAULT NULL COMMENT '开始时间',
      `credit_cycle` int(11) DEFAULT NULL COMMENT '贷款周期',
      `execute_status` tinyint(1) DEFAULT NULL COMMENT '上次执行状态3:报警；0:错误；1:正常；2:执行中',
      `read_status` tinyint(1) DEFAULT '0' COMMENT '阅读状态（0:未读，1:已读）',
      `parms_json` varchar(255) DEFAULT NULL COMMENT '参数mapJson',
      PRIMARY KEY (`id`),
      KEY `gather_index` (`job_id`,`user_id`,`execute_status`,`task_status`,`distribute_status`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</update>

    <update id="createAbTaskTable" parameterType="java.lang.String">
        CREATE TABLE IF NOT EXISTS `${tableName}` (
        `id` bigint(20) NOT NULL AUTO_INCREMENT,
        `name` varchar(255) DEFAULT NULL COMMENT '姓名',
        `id_number` varchar(20) DEFAULT NULL COMMENT '身份证',
        `cid` varchar(50) DEFAULT NULL COMMENT '手机号',
        `job_id` int(11) DEFAULT NULL COMMENT '任务编号',
        `create_time` datetime DEFAULT NULL COMMENT '创建时间',
        `task_status` TINYINT(1) DEFAULT '0' COMMENT '执行状态（0:未执行;1:监控中;2完成;）',
        `distribute_status` TINYINT(1) DEFAULT '0' COMMENT '分发状态',
        `update_time` datetime DEFAULT '2018-01-01 00:00:00' COMMENT '更新时间',
        `result_map` text COMMENT '查询结果',
        `remark` varchar(255) DEFAULT NULL COMMENT '备注',
        `user_id` bigint(11) DEFAULT NULL COMMENT '客户标识',
        `execute_status` int(11) DEFAULT NULL COMMENT '上次执行状态,1:通过；2：人工审核；3：拒绝；4：失效',
        `goal_id` int(11) DEFAULT NULL COMMENT '目标编号（规则集|决策集|模型）',
        `parms_json` VARCHAR (255) DEFAULT NULL COMMENT '参数集',
        `role` VARCHAR (10) DEFAULT NULL COMMENT '区分AB',
        PRIMARY KEY (`id`),
        KEY `gather_index` (`job_id`,`user_id`,`execute_status`,`task_status`,`distribute_status`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
    </update>

    <delete id="deleteByJobId" parameterType="map">
		delete  from ${tableName} where job_id = #{jobId}
	</delete>

    <!-- 批量更新状态 -->
    <update id="updateBatch">
        update ${tableName}
        <set >
        <if test="distributeStatus != null" >
            distribute_status = #{distributeStatus,jdbcType=VARCHAR},
        </if>
        <if test="updateTime != null" >
            update_time = #{updateTime},
        </if>
        <if test="taskStatus != null" >
            task_status = #{taskStatus,jdbcType=INTEGER},
        </if>
        <if test="executeStatus != null" >
            execute_status = #{executeStatus,jdbcType=INTEGER},
        </if>
        <if test="resultMap != null" >
            result_map = #{resultMap,jdbcType=VARCHAR},
        </if>
        </set>
         where id in
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="queryTaskStatusNum" parameterType="map" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
        SELECT
        count(1) taskTotal,
        SUM(CASE WHEN execute_status = 3 THEN 1 ELSE 0 END) exceptionCount,
        SUM(CASE WHEN execute_status = 0 THEN 1 ELSE 0 END) failCount,
        SUM(CASE WHEN task_status = 1 THEN 1 ELSE 0 END) monitoringCount,
        SUM(CASE WHEN task_status = 2 THEN 1 ELSE 0 END) overCount
        FROM ${taskTableName}
        WHERE user_id = #{userId} and job_id = #{jobId}
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            AND create_time BETWEEN #{startTime} AND #{endTime}
        </if>
    </select>

    <update id="updateDistributeNumBatch">

        <foreach collection="list" item="item" index="index"
                 separator=";">
            update ${tableName}
            <set >
                    distribute_num = #{item.distributeNum,jdbcType=INTEGER},
            </set>
            where id = #{item.id}
        </foreach>
    </update>
    <update id="updateByPrimaryKey" parameterType="map">
        update ${tableName}
        <set >
            <if test="taskStatus != null" >
                task_status = #{taskStatus,jdbcType=INTEGER},
            </if>
            <if test="distributeNum != null" >
                distribute_num = #{distributeNum,jdbcType=INTEGER},
            </if>
            <if test="executeStatus != null" >
                execute_status = #{executeStatus,jdbcType=INTEGER},
            </if>
            <if test="readStatus != null" >
                read_status = #{readStatus,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{taskId}
    </update>

    <select id="getParamByJobId" resultType="java.lang.String">
        select param_json from monitor_dimension where id = (select dimension from monitor_jobs where job_id = #{jobId})
    </select>

    <select id="getOverTaskList" resultType="com.geo.rcs.modules.monitor.entity.ScheduleTask">
        select * from ${tableName} where task_status = 2 and job_id = #{jobId}
    </select>

</mapper>
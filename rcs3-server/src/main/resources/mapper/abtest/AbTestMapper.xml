<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.geo.rcs.modules.abtest.dao.AbTestMapper">

    <sql id="Base_Column_List">
		job_id, job_name, goal_a, goal_b, scale_a, scale_b, job_status, event_type, line_type, rule_type,
		entry_type, date_format(create_time, '%Y-%m-%d %H:%i:%s') AS create_time, unique_code, parameters,bean_name,method_name,cron_expression,task_count,completed_count
	</sql>
    <insert id="saveAbJob" parameterType="com.geo.rcs.modules.abtest.entity.AbTest" useGeneratedKeys="true"
            keyProperty="jobId">
		insert into ab_job
		(
			`job_name`,
			`goal_a`,
			`goal_b`,
			`scale_a`,
			`scale_b`,
			`job_status`,
			`event_type`,
			`line_type`,
			`rule_type`,
			`entry_type`,
			`create_time`,
			`unique_code`,
			`parameters`,
			`bean_name`,
			`method_name`,
			`cron_expression`


		)
		values
		(
			#{jobName},
			#{goalA},
			#{goalB},
			#{scaleA},
			#{scaleB},
			#{jobStatus},
			#{eventType},
			#{lineType},
			#{ruleType},
			#{entryType},
			#{createTime},
			#{uniqueCode},
			#{parameters},
			#{beanName},
			#{methodName},
			#{cronExpression}
		)
	</insert>

    <update id="updateAbJob" parameterType="com.geo.rcs.modules.abtest.entity.AbTest">
        update ab_job
        <set>
            <if test="taskCount != null">
                task_count = #{taskCount,jdbcType=INTEGER},
            </if>
            <if test="jobStatus != null">
                job_status = #{jobStatus,jdbcType=INTEGER},
            </if>
            <if test="completedCount != null">
                completed_count = #{completedCount,jdbcType=INTEGER},
            </if>
        </set>
        where job_id = #{jobId}
    </update>

    <update id="updateAbJobCompletedCount" parameterType="java.lang.Long">
		update ab_job
		set completed_count = completed_count+1
		where job_id = #{jobId} and task_count > completed_count
	</update>

    <!-- 分页查询 -->
    <select id="findByPage" resultType="com.geo.rcs.modules.abtest.entity.AbTest" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from ab_job where unique_code = #{userId}
        <if test="jobName != null and jobName != ''">
            AND CONCAT(job_name) LIKE CONCAT('%',#{jobName},'%')
        </if>
        <if test="jobStatus != null and jobStatus != ''">
            AND job_status = #{jobStatus}
        </if>
        <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
        order by create_time desc
    </select>

    <select id="getAbTestJobByPrimaryKey" resultType="com.geo.rcs.modules.abtest.entity.AbTest"
            parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from ab_job where job_id = #{jobId}
    </select>
    <select id="getAbTestJobByName" resultType="com.geo.rcs.modules.abtest.entity.AbTest"
            parameterType="com.geo.rcs.modules.abtest.entity.AbTest">
        select
        <include refid="Base_Column_List"/>
        from ab_job where job_name = #{jobName}
    </select>

    <select id="queryByFilter" resultType="com.geo.rcs.modules.abtest.entity.AbScheduleTask" parameterType="map">
		select * from ${tableName}
		where
		job_id = #{jobId}
		and user_id = #{uniqueCode}
		and distribute_status = 0
		and task_status != 2
		limit #{limit}
	</select>

    <select id="getEventStat" parameterType="java.util.Map"
            resultType="java.util.Map">
        SET @row_num = 0;
        SELECT
        id,
        COUNT(id) eventTotal,
        SUM(CASE WHEN execute_status = 1 THEN 1 ELSE 0 END) passEventCount,
        SUM(CASE WHEN execute_status = 2 THEN 1 ELSE 0 END) manualReviewCount,
        SUM(CASE WHEN execute_status = 3 THEN 1 ELSE 0 END) refuseEventCount,
        SUM(CASE WHEN execute_status = 4 THEN 1 ELSE 0 END) invalidEventCount
        FROM ${tableName}
        <where>
            user_id = #{userId} AND execute_status != 0 and job_id = #{jobId} and goal_id = #{goalId}
        </where>
    </select>
    <select id="getTaskCountAndCompletedCount" parameterType="java.util.Map"
            resultType="java.util.Map">
        SET @row_num = 0;
        SELECT
        COUNT(id) taskCount,
        SUM(CASE WHEN result_map != 'null' THEN 1 ELSE 0 END) completedCount
        FROM ${tableName}
        <where>
            user_id = #{userId}
            <if test="jobId != null and jobId != ''">
                AND job_id = #{jobId}
            </if>
        </where>
    </select>
    <update id="updateJobStatus" parameterType="map">
		update ab_job as a,
		(select count(id) idNum count(result_map) mapNum  from ${tableName} as b where job_id=#{id})
		set a.job_status=2 where a.job_id=#{id} and idNum=mapNum
	</update>
</mapper>